import os
import hashlib
import xml.etree.ElementTree as ET
from fpdf import FPDF
from datetime import datetime

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
LOGO_PATH = os.path.join(BASE_DIR, "static", "logo.png")


class PDF(FPDF):
    def header(self):
        try:
            if os.path.exists(LOGO_PATH):
                self.image(LOGO_PATH, x=165, y=8, w=30)
        except Exception as e:
            print(f"Logo error: {e}")
        self.set_font("Arial", "B", 16)
        self.set_text_color(0, 51, 102)
        self.cell(0, 10, "CDAC's Dependency Scan Report", ln=True, align='C')
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.set_text_color(128)
        self.cell(0, 10, f" Generated by CDAC | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 0, 'C')

    def label_value_row(self, label, value, w_label=50, w_value=130):
        self.set_font("Arial", "", 9)
        self.set_fill_color(230, 240, 255)
        self.cell(w_label, 8, label, 1, 0, 'L', True)
        self.multi_cell(w_value, 8, value, border=1)


def extract_vulnerabilities(xml_path, base_scan_path):
    vulnerabilities = []
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()
        ns = {'ns': 'https://jeremylong.github.io/DependencyCheck/dependency-check.4.1.xsd'}

        base_scan_path = os.path.abspath(base_scan_path).replace("\\", "/")

        for dependency in root.findall(".//ns:dependency", ns):
            file_name_el = dependency.find("ns:fileName", ns)
            file_path_el = dependency.find("ns:filePath", ns)
            version_el = dependency.find("ns:version", ns)

            version = version_el.text if version_el is not None else ""
            if not version:
                for ev in dependency.findall(".//ns:evidenceCollected/ns:evidence", ns):
                    if ev.attrib.get("type") == "version":
                        val = ev.find("ns:value", ns)
                        if val is not None:
                            version = val.text
                            break
            version = version if version else "Unknown"

            file_name = file_name_el.text if file_name_el is not None else "Unknown"
            full_file_path = file_path_el.text if file_path_el is not None else "Unknown"
            full_file_path = os.path.abspath(full_file_path).replace("\\", "/")

            if full_file_path.startswith(base_scan_path):
                relative_path = full_file_path[len(base_scan_path):].lstrip("/\\")
            else:
                relative_path = full_file_path

            for vuln in dependency.findall(".//ns:vulnerability", ns):
                name = vuln.find("ns:name", ns)
                severity = vuln.find("ns:severity", ns)
                description = vuln.find("ns:description", ns)

                vulnerabilities.append({
                    "file": file_name,
                    "path": relative_path,
                    "version": version,
                    "cve_id": name.text if name is not None else "N/A",
                    "severity": severity.text if severity is not None else "Unknown",
                    "description": description.text.strip()[:1000] if description is not None else "No description available."
                })

    except Exception as e:
        print(f"XML Parse Error: {e}")
    return vulnerabilities


def generate_pdf(scan_id, zip_path, pdf_path, pci_dss_enabled, vulnerabilities, scanned_filename):
    pdf = PDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    try:
        with open(zip_path, 'rb') as f:
            sha256_hash = hashlib.sha256(f.read()).hexdigest()
    except Exception:
        sha256_hash = 'N/A'

    info_pairs = [
        ("Scan ID:", scan_id),
        ("File Scanned:", scanned_filename),
        ("Hash Code (SHA-256):", sha256_hash),
        ("Scan Date:", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    ]

    for label, value in info_pairs:
        pdf.label_value_row(label, value)

    # === Summary Table ===
    pdf.ln(10)
    pdf.set_font("Arial", "B", 11)
    pdf.set_fill_color(200, 220, 255)
    pdf.cell(10, 8, "#", 1, 0, 'C', True)
    pdf.cell(80, 8, "File", 1, 0, 'C', True)
    pdf.cell(60, 8, "CVE ID", 1, 0, 'C', True)
    pdf.cell(30, 8, "Severity", 1, 1, 'C', True)

    pdf.set_font("Arial", "", 10)
    for idx, vuln in enumerate(vulnerabilities, 1):
        sev = vuln.get("severity", "unknown").upper()
        color = {
            "CRITICAL": (139, 0, 0),
            "HIGH": (204, 0, 0),
            "MEDIUM": (255, 102, 0),
            "LOW": (255, 153, 51)
        }.get(sev, (0, 0, 0))

        link = pdf.add_link()
        vuln["link"] = link

        pdf.set_text_color(0, 0, 255)
        pdf.cell(10, 8, str(idx), 1, 0, 'C')
        pdf.cell(80, 8, vuln.get("file", "N/A")[:40], 1, 0, 'L', link=link)
        pdf.cell(60, 8, vuln.get("cve_id", "N/A"), 1, 0, 'L', link=link)

        pdf.set_text_color(*color)
        pdf.cell(30, 8, vuln.get("severity", "N/A"), 1, 1, 'C')
        pdf.set_text_color(0, 0, 0)

    # === Details Section ===
    pdf.ln(6)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Vulnerability Details:", ln=True, align="L")

    for idx, vuln in enumerate(vulnerabilities, 1):
        if pdf.get_y() > 250:
            pdf.add_page()

        link = vuln.get("link")
        if link:
            pdf.set_link(link)

        pdf.set_font("Arial", "B", 11)
        pdf.set_text_color(0, 102, 204)
        pdf.cell(0, 8, f"{idx}. CVE ID: {vuln.get('cve_id', 'N/A')}", ln=True, align="L")

        pdf.set_text_color(0, 0, 0)
        pdf.set_font("Arial", "", 10)
        pdf.label_value_row("File:", vuln.get("file", "N/A"))
        pdf.label_value_row("Path:", vuln.get("path", "N/A"))
        pdf.label_value_row("Version:", vuln.get("version", "Unknown"))
        pdf.label_value_row("Severity:", vuln.get("severity", "Unknown"))

        pdf.ln(4)
        description = vuln.get('description', 'No description provided.')
        pdf.multi_cell(0, 6, f"Description: {description}", align="L")
        pdf.ln(4)

        pdf.set_draw_color(0, 0, 0)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(6)

    pdf.output(pdf_path)
